package com.patel.BookingService.service;

import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.patel.BookingService.Iservice.IBookingService;
import com.patel.BookingService.config.UserManagementClient;
import com.patel.BookingService.dto.BookinRequest;
import com.patel.BookingService.dto.UserWrapper;
import com.patel.BookingService.model.Booking;
import com.patel.BookingService.repository.BookingRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class BookingService implements IBookingService {

	private final BookingRepository bookingRepository;
	
	private final UserManagementClient client;
	
	@Override
	public Booking addNewBooking(String token, BookinRequest bookingRequest) {
		
		try {
			ResponseEntity<?> response = client.getProfile(token);
			
			UserWrapper user = getUserDetails(response);
			if(user != null) {
				Booking newBooking = Booking.builder()
						.userId(user.getId())
						.showtimeId(bookingRequest.getShowtimeId())
						.createdAt(bookingRequest.getCreatedAt())
						.numTickets(bookingRequest.getNumTickets())
						.build();

				return bookingRepository.save(newBooking);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private UserWrapper getUserDetails(ResponseEntity<?> response) {
		if(response.getStatusCode().is2xxSuccessful()) {
			Object userObject = response.getBody();
			System.out.println(userObject);
			if(userObject instanceof Map) {
				
				Map<String, Object> userMap = (Map<String, Object>) userObject;
	            
	            UserWrapper user = new UserWrapper();
	            user.setId((Long) userMap.get("id"));
	            user.setFirstName((String) userMap.get("firstName"));
	            user.setLastName((String) userMap.get("lastName"));
	            user.setEmail((String) userMap.get("email"));
	            user.setPhone((String) userMap.get("phone"));
				return user;
			}
		}
		
		return null;
	}

	@Override
	public List<Booking> getAllBookings(String token) {
		try {
			UserWrapper user = getUserDetails(client.getProfile(token));
			
			if(user != null) {
				List<Booking> allBookings = bookingRepository.findByUserId(user.getId());
				
				return allBookings;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

}
